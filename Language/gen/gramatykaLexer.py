# Generated from C:/Users/dkmak/Desktop/genetic_programming_project/Language/gramatyka.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,207,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,3,28,173,8,28,1,28,4,28,176,8,28,11,28,12,28,
        177,1,28,3,28,181,8,28,1,28,5,28,184,8,28,10,28,12,28,187,9,28,1,
        29,1,29,5,29,191,8,29,10,29,12,29,194,9,29,1,30,4,30,197,8,30,11,
        30,12,30,198,1,31,4,31,202,8,31,11,31,12,31,203,1,31,1,31,0,0,32,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,5,1,0,48,57,
        2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,2,
        0,9,9,32,32,213,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,67,1,0,0,0,
        5,74,1,0,0,0,7,81,1,0,0,0,9,89,1,0,0,0,11,93,1,0,0,0,13,100,1,0,
        0,0,15,105,1,0,0,0,17,110,1,0,0,0,19,117,1,0,0,0,21,122,1,0,0,0,
        23,124,1,0,0,0,25,134,1,0,0,0,27,136,1,0,0,0,29,138,1,0,0,0,31,141,
        1,0,0,0,33,143,1,0,0,0,35,145,1,0,0,0,37,147,1,0,0,0,39,149,1,0,
        0,0,41,151,1,0,0,0,43,154,1,0,0,0,45,157,1,0,0,0,47,159,1,0,0,0,
        49,161,1,0,0,0,51,164,1,0,0,0,53,167,1,0,0,0,55,169,1,0,0,0,57,172,
        1,0,0,0,59,188,1,0,0,0,61,196,1,0,0,0,63,201,1,0,0,0,65,66,5,59,
        0,0,66,2,1,0,0,0,67,68,5,112,0,0,68,69,5,114,0,0,69,70,5,105,0,0,
        70,71,5,110,0,0,71,72,5,116,0,0,72,73,5,32,0,0,73,4,1,0,0,0,74,75,
        5,105,0,0,75,76,5,110,0,0,76,77,5,112,0,0,77,78,5,117,0,0,78,79,
        5,116,0,0,79,80,5,32,0,0,80,6,1,0,0,0,81,82,5,111,0,0,82,83,5,117,
        0,0,83,84,5,116,0,0,84,85,5,112,0,0,85,86,5,117,0,0,86,87,5,116,
        0,0,87,88,5,32,0,0,88,8,1,0,0,0,89,90,5,105,0,0,90,91,5,102,0,0,
        91,92,5,32,0,0,92,10,1,0,0,0,93,94,5,32,0,0,94,95,5,101,0,0,95,96,
        5,108,0,0,96,97,5,115,0,0,97,98,5,101,0,0,98,99,5,32,0,0,99,12,1,
        0,0,0,100,101,5,102,0,0,101,102,5,111,0,0,102,103,5,114,0,0,103,
        104,5,32,0,0,104,14,1,0,0,0,105,106,5,32,0,0,106,107,5,105,0,0,107,
        108,5,110,0,0,108,109,5,32,0,0,109,16,1,0,0,0,110,111,5,102,0,0,
        111,112,5,105,0,0,112,113,5,110,0,0,113,114,5,97,0,0,114,115,5,108,
        0,0,115,116,5,32,0,0,116,18,1,0,0,0,117,118,5,118,0,0,118,119,5,
        97,0,0,119,120,5,114,0,0,120,121,5,32,0,0,121,20,1,0,0,0,122,123,
        5,61,0,0,123,22,1,0,0,0,124,125,5,102,0,0,125,126,5,117,0,0,126,
        127,5,110,0,0,127,128,5,99,0,0,128,129,5,116,0,0,129,130,5,105,0,
        0,130,131,5,111,0,0,131,132,5,110,0,0,132,133,5,32,0,0,133,24,1,
        0,0,0,134,135,5,40,0,0,135,26,1,0,0,0,136,137,5,41,0,0,137,28,1,
        0,0,0,138,139,5,41,0,0,139,140,5,59,0,0,140,30,1,0,0,0,141,142,5,
        44,0,0,142,32,1,0,0,0,143,144,5,42,0,0,144,34,1,0,0,0,145,146,5,
        47,0,0,146,36,1,0,0,0,147,148,5,43,0,0,148,38,1,0,0,0,149,150,5,
        45,0,0,150,40,1,0,0,0,151,152,5,61,0,0,152,153,5,61,0,0,153,42,1,
        0,0,0,154,155,5,33,0,0,155,156,5,61,0,0,156,44,1,0,0,0,157,158,5,
        60,0,0,158,46,1,0,0,0,159,160,5,62,0,0,160,48,1,0,0,0,161,162,5,
        60,0,0,162,163,5,61,0,0,163,50,1,0,0,0,164,165,5,62,0,0,165,166,
        5,61,0,0,166,52,1,0,0,0,167,168,5,123,0,0,168,54,1,0,0,0,169,170,
        5,125,0,0,170,56,1,0,0,0,171,173,5,45,0,0,172,171,1,0,0,0,172,173,
        1,0,0,0,173,175,1,0,0,0,174,176,7,0,0,0,175,174,1,0,0,0,176,177,
        1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,179,181,
        5,46,0,0,180,179,1,0,0,0,180,181,1,0,0,0,181,185,1,0,0,0,182,184,
        7,0,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,
        1,0,0,0,186,58,1,0,0,0,187,185,1,0,0,0,188,192,7,1,0,0,189,191,7,
        2,0,0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,
        0,0,0,193,60,1,0,0,0,194,192,1,0,0,0,195,197,7,3,0,0,196,195,1,0,
        0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,62,1,0,0,
        0,200,202,7,4,0,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,
        0,203,204,1,0,0,0,204,205,1,0,0,0,205,206,6,31,0,0,206,64,1,0,0,
        0,8,0,172,177,180,185,192,198,203,1,6,0,0
    ]

class gramatykaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    INT = 29
    STRING = 30
    NEWLINE = 31
    WS = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'print '", "'input '", "'output '", "'if '", "' else '", 
            "'for '", "' in '", "'final '", "'var '", "'='", "'function '", 
            "'('", "')'", "');'", "','", "'*'", "'/'", "'+'", "'-'", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "STRING", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "INT", "STRING", "NEWLINE", "WS" ]

    grammarFileName = "gramatyka.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


